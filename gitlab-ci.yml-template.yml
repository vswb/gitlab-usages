## CI/CD with gitlab and openvpn to visual weber company private network
## Contact to dev@fsofts.com to get more details 

variables:
  CI_DEBUG_TRACE: "false"
  SSH_USER: "dev"
  DEPLOY_PATH: "/home/dev/domains/fuso.dev.fsofts.com/public_html"
  PHP: "/usr/local/php82/bin/php"
  GIT: "/usr/bin/git"
  YARN: "/usr/bin/yarn"
  NPM: "/home/dev/.nvm/versions/node/v20.14.0/bin/npm"
  PNPM: "/usr/bin/pnpm"
image: ubuntu
before_script:
  - echo "This is the 'before_script' script"
  # Disable the interactive mode
  - echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
  - export REGISTER_NON_INTERACTIVE="true"
  - export DEBIAN_FRONTEND="noninteractive"
  - export DEBCONF_NOWARNINGS="yes"
  - export DEBCONF_TERSE="yes"
  - dpkg-reconfigure debconf --frontend=noninteractive
  - set -x && echo "debconf debconf/frontend select ${DEBIAN_FRONTEND}" | debconf-set-selections && echo 'APT::Install-Recommends "false";' | tee /etc/apt/apt.conf.d/99install-recommends && echo 'APT::Get::Assume-Yes "true";' | tee /etc/apt/apt.conf.d/99assume-yes && sed -Ei 's|^(DPkg::Pre-Install-Pkgs .*)|#\1|g' /etc/apt/apt.conf.d/70debconf && debconf-show debconf

  - echo "Setup Open VPN"
  - which openvpn || (DEBIAN_FRONTEND=noninteractive apt-get update -y -qq && DEBIAN_FRONTEND=noninteractive apt-get install -y -qq apt-utils curl network-manager openssh-client openvpn iputils-ping zip unzip jq rsync ) # Install openvpn if not available. 
  - cat <<< $CLIENT_OVPN > /etc/openvpn/client.ovpn # Move vpn config from gitlab variable (Settings > CI/CD > Variables > CLIENT_OVPN) to config file.
  - cat <<< "log /etc/openvpn/client.log" >> /etc/openvpn/client.ovpn

  # - echo "Creating tun device"
  # - mkdir -p /dev/net
  # - mknod /dev/net/tun c 10 200
  # - chmod 600 /dev/net/tun

  - echo "Trying to start openVPN connection"
  - openvpn --config /etc/openvpn/client.ovpn --auth-user-pass <(echo -e "$VPN_U\n$VPN_P") --daemon # Start openvpn with config as a deamon.
  - sleep 5s # Wait for some time so the vpn can connect before doing anything else.
  - cat /etc/openvpn/client.log # Print the vpn log.
  - ls -al /etc/openvpn/
  
  - ping -c 1 ${SERVER_IP} # Ping the server I want to deploy to. If not available this stops the deployment process.

  # Settings > Repository > Deploy Keys > "DEPLOY_KEY_PUBLIC" is the public key of the utitlized SSH pair (choose `Write access allowed` on creation)
  # Settings > CI/CD > Variables > "DEPLOY_KEY_PRIVATE" is the private key of the utitlized SSH pair, type is 'File' and ends with empty line
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

  - 'which ssh-agent || ( DEBIAN_FRONTEND=noninteractive apt-get update -y -qq && DEBIAN_FRONTEND=noninteractive apt-get install -y -qq openssh-client git )'
  - eval "$(ssh-agent -s)"
  - echo "$DEPLOY_KEY_PRIVATE" | tr -d '\r' > ~/.ssh/id_rsa # - echo "${DEPLOY_KEY_PRIVATE}" | tr -d ' ' | base64 -d | ssh-add -
  - '[[ -f /.dockerenv ]] && echo -e "Host *\\n\\tStrictHostKeyChecking no\\n\\n" > ~/.ssh/config'
  - chmod 600 ~/.ssh/id_rsa

  - ssh-keyscan -H 'gitlab.com' >> ~/.ssh/known_hosts
  - ssh-keyscan -H ${SSH_PORT} ${SERVER_IP} >> ~/.ssh/known_hosts
  
  - chmod 644 ~/.ssh/known_hosts
  - cat ~/.ssh/known_hosts  
  - ls -al ~/.ssh
stages:
  - release/v1
  - develop
  - master
release/v1:
  stage: release/v1
  only:
    # This build will run only when something is pushed to the release/v1 branch.
    - release/v1
  script:
    - pwd && whoami
    - ls -al ~/.ssh
    - ssh -o StrictHostKeyChecking=no ${SSH_PORT} ${SSH_USER}@${SERVER_IP}
    - |
      ssh -tt ${SSH_PORT} ${SSH_USER}@${SERVER_IP} /bin/bash -s << EOT
      echo ${DEPLOY_PATH}
      echo $PHP && echo $GIT
      cd ${DEPLOY_PATH}
      $GIT checkout composer.lock && $GIT checkout package-lock.json && $GIT checkout pnpm-lock.yaml && $GIT checkout yarn.lock
      $GIT pull
      $YARN install && $YARN run prod
      PHP=$PHP bash bin/bootstrap.sh -e d
      yes | $PHP artisan config:clear
      $PHP artisan config:clear && $PHP artisan cache:clear && $PHP artisan view:clear && $PHP artisan clear-compiled
      $PHP composer.phar dumpautoload && $PHP artisan optimize
      exit
      EOT
master:
  stage: master
  only:
    # This build will run only when something is pushed to the develop branch.
    - master
  script:
    - whoami && pwd
after_script:
  - echo "This is the 'after_script' script"
  - echo "CI_COMMIT_SHA's value is ${CI_COMMIT_SHA}"
